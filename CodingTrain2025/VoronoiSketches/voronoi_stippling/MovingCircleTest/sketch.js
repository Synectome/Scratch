// generated by chat gpt on march 23rd
// goal is to have an example on how to determine when a given point is within the bounds of a shape
// prompt was: in p5js write a sketch where there are random dots across the canvas. also a circle bounces across the canvas, and when that circle surrounds any of the 'random dots' on the canvas, those dots change color to red.
// originally - just a moving circle that changed dots colours
let dots = [];
let circle;

function setup() {
  createCanvas(600, 400);
  
  // Generate random dots
  for (let i = 0; i < 50; i++) {
    dots.push(new Dot(random(width), random(height)));
  }

  // Initialize bouncing circle
  circle = new BouncingCircle(width / 2, height / 2, 50, random(2, 4), random(2, 4));
}

function draw() {
  background(220);
  
  // Update and draw bouncing circle
  circle.update();
  circle.display();

  // Update and draw dots
  for (let dot of dots) {
    // Check if dot is inside the circle
    dot.checkCollision(circle);
    dot.display();
  }
}

// Class for dots
class Dot {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.color = color(0); // Default color black
  }

  checkCollision(circle) {
    let d = dist(this.pos.x, this.pos.y, circle.pos.x, circle.pos.y);
    if (d < circle.radius) {
      this.color = color(255, 0, 0); // Change to red if inside the circle
    } else {
      this.color = color(0);
    }
  }

  display() {
    fill(this.color);
    noStroke();
    ellipse(this.pos.x, this.pos.y, 8, 8);
  }
}

// Class for bouncing circle
class BouncingCircle {
  constructor(x, y, radius, speedX, speedY) {
    this.pos = createVector(x, y);
    this.vel = createVector(speedX, speedY);
    this.radius = radius;
  }

  update() {
    this.pos.add(this.vel);

    // Bounce off mouse
    let mouse_speed = dist(mouseX, mouseY, pmouseX, pmouseY)*0.1;
    console.log(mouse_speed);
    // need to cap the max speed of mouse
    let left = this.pos.x - this.radius < mouseX && mouseX < this.pos.x;
    let right = this.pos.x + this.radius > mouseX && mouseX > this.pos.x;
    let top = this.pos.y + this.radius > mouseY && ;
    let bottom = this.pos.y - this.radius < mouseY;
    if (this.pos.x - this.radius < mouseX && this.pos.x + this.radius > mouseX &&
      this.pos.y - this.radius < mouseY && this.pos.y + this.radius > mouseY){
        // need to cap the max speed of mouse
        this.vel.x += mouse_speed;
        this.vel.y += mouse_speed;
    }

    // Bounce off walls
    if (this.pos.x - this.radius < 0 || this.pos.x + this.radius > width) {
      this.vel.x *= -1;
    }
    if (this.pos.y - this.radius < 0 || this.pos.y + this.radius > height) {
      this.vel.y *= -1;
    }
    this.vel.y += 0.1;
  }

  display() {
    fill(0, 100, 255, 100);
    noStroke();
    ellipse(this.pos.x, this.pos.y, this.radius * 2, this.radius * 2);
  }
}
